Q1: Partition Equal Subset Sum

class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total_sum = sum(nums)
        
        # If the total sum is odd, we can't partition it into two equal subsets
        if total_sum % 2 != 0:
            return False
        
        target = total_sum // 2
        
        # dynamic programming to check if we can form the target sum
        dp = [False] * (target + 1)
        dp[0] = True  
        for num in nums:
            for j in range(target, num - 1, -1):
                dp[j] = dp[j] or dp[j - num]
        
        return dp[target] 

Q2: Coin Change
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        # Initialize dp array with amount + 1 (which represents infinity in this context)
        dp = [amount + 1] * (amount + 1)
        dp[0] = 0  # Base case: 0 coins needed to make amount 0

        for i in range(1, amount + 1):
            for coin in coins:
                if coin <= i:
                    dp[i] = min(dp[i], dp[i - coin] + 1)

        return dp[amount] if dp[amount] != amount + 1 else -1 

Q3:Maximum Subarray

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum = current_sum = nums[0]

        for num in nums[1:]:
            current_sum = max(num, current_sum + num)  # Extend or start new subarray
            max_sum = max(max_sum, current_sum)        # Track the maximum sum found

        return max_sum   

