#Q1: Two Sum II - Input Array Is Sorted:

Code:
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        # Two pointers approach
        left_pointer, right_pointer = 0, len(numbers) - 1  
        while left_pointer < right_pointer:
            pointers_sum = numbers[left_pointer] + numbers[right_pointer]
            if pointers_sum == target:
                return [left_pointer + 1, right_pointer + 1] #Convert to 1-based indexing
            elif pointers_sum < target:
                left_pointer += 1  # Move left pointer to increase sum
            else:
                right_pointer -= 1  # Move right pointer to decrease sum



#Q2:Products of array discluding self:

Code:
class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        result = [1] * n  # Initialize result array with 1

        # First pass: Compute prefix product using pointer1
        pointer1 = 1
        for i in range(n):
            result[i] = pointer1
            pointer1 *= nums[i]  # Update pointer1 product

        # Second pass: Compute suffix product using pointer2 and multiply with the result
        pointer2 = 1
        for i in range(n - 1, -1, -1):
            result[i] *= pointer2
            pointer2 *= nums[i]  # Update pointer2 product

        return result

#Q3: Sort Colours:

Code:
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        # Two pointer approach:
        left, right, i = 0, len(nums) - 1, 0
        
        while i <= right:
            if nums[i] == 0:
                nums[i], nums[left] = nums[left], nums[i]  # Swap with left pointer
                left += 1
                i += 1  # Move forward since swapped value is definitely correct
            elif nums[i] == 2:
                nums[i], nums[right] = nums[right], nums[i]  # Swap with right pointer
                right -= 1  # Decrement right pointer
            else:
                i += 1  # Move forward 

