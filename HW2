Q1:
class Solution:
    def myAtoi(self, s: str) -> int:
        INT_MAX, INT_MIN = 2**31 - 1, -2**31
        i, n, sign, result = 0, len(s), 1, 0
        
        # Ignore leading whitespace
        while i < n and s[i] == ' ':
            i += 1
        
        # Check for sign
        if i < n and (s[i] == '+' or s[i] == '-'):
            sign = -1 if s[i] == '-' else 1
            i += 1
    
        # Convert digits to integer
        while i < n and s[i].isdigit():
            digit = int(s[i])
        
            # Check for overflow
            if result > (INT_MAX - digit) // 10:
                return INT_MAX if sign == 1 else INT_MIN
                
            result = result * 10 + digit
            i += 1
            
        return sign * result      

Q2: 
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        result = []
        p_count = Counter(p)
        s_count = Counter(s[:len(p) - 1])
    
        for i in range(len(p) - 1, len(s)):
            s_count[s[i]] += 1  # Include the new character in the window
        
            if s_count == p_count:
                result.append(i - len(p) + 1)
        
            s_count[s[i - len(p) + 1]] -= 1  # Remove the old character from the window
            if s_count[s[i - len(p) + 1]] == 0:
                del s_count[s[i - len(p) + 1]]  # Clean up zero counts
    
        return result  

Q3: 
class Solution:
    def reverseWords(self, s: str) -> str:
    # Split the string into words
        words = s.split()
    
        # Reverse the list of words
        reversed_words = words[::-1]
    
        # Join the reversed words with a single space
        result = " ".join(reversed_words)
    
        return result
