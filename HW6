Q1:Lowest Common Ancestor of a Binary Tree

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
                # Base case: if root is None or equals p or q
                if not root or root == p or root == q:
                    return root

                # Recurse on left and right subtrees
                left = self.lowestCommonAncestor(root.left, p, q)
                right = self.lowestCommonAncestor(root.right, p, q)

                # If both sides return non-null, root is the LCA
                if left and right:
                    return root

                # Otherwise return the non-null side
                return left if left else right

Q2: Top K Frequent Elements

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        # Step 1: Count frequencies
        count = Counter(nums)  # Dictionary: num -> frequency
        
        # Step 2: Create buckets, index = frequency
        freq = [[] for _ in range(len(nums) + 1)]
        for num, c in count.items():
            freq[c].append(num)
        
        # Step 3: Flatten the buckets from high freq to low
        res = []
        for i in range(len(freq) - 1, 0, -1):
            for num in freq[i]:
                res.append(num)
                if len(res) == k:
                    return res  
